{"version":3,"sources":["recoil/atoms.js","Styles.js","Constants.js","recoil/selectors.js","components/BadgeScan.js","components/BeingOnBreak.js","assets/breaktime.png","components/SetTime.js","components/ScanResults.js","components/BreakOverTime.js","components/AppBarContent.js","App.js","reportWebVitals.js","index.js"],"names":["currentListState","atom","key","default","currentBreaktimeState","currentResultState","useStyle","makeStyles","root","padding","margin","inputStyles","borderRadius","border","width","formStyles","resultContainer","textAlign","marginBottom","inlineDisplay","display","paddingRight","beingOnBreakContainer","height","overflowY","breakOverTimeContainer","loadingOverlay","position","backgroundColor","scanInputBlock","marginTop","iconPadding","whiteColor","color","flexDisplay","flexDirection","justifyContent","alignItems","associateDisplay","paddingTop","paddingBottom","borderBottom","listHeader","marginRight","boldFont","fontWeight","bigText","fontSize","HOSTNAME","associatesBeingOnBreakState","selector","get","filter","item","time_in","associatesBreakOverTimeState","list","currentBreakTime","timeOut","Date","time_out","timeIn","numberOfAssociatesScannedOutState","length","numberOfAssociateBackFronBreakState","BadgeScan","props","classes","useState","badge_number","setBadgeNumber","loading","setLoading","inputRef","createRef","setCurrentResult","useSetRecoilState","numberOfAssociatesScannedOut","useRecoilValue","useEffect","current","focus","Paper","className","Grid","container","direction","Box","Typography","variant","hidden","justify","CircularProgress","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","status","window","alert","catch","console","log","finally","onChange","target","value","placeholder","ref","BeingOnBreak","beingOnBreakList","xs","sm","Container","map","user_name","user_first_name","getHours","getMinutes","SetTime","useRecoilState","currentBreaktime","setCurrentBreaktime","React","anchorEl","setAnchorEl","handleClose","minutes","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","ScanResults","currentResult","breaktime","numberOfAssociatesBackFromBreak","src","BreakImage","alt","associateData","operation","durMinute","Math","floor","duration","durSecond","style","chooseDisplay","durSeconds","AppBarContent","endIcon","appBarStyle","App","setList","socket","io","emit","on","AppBar","md","BreakOverTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.357ae4d4.chunk.js","sourcesContent":["import { atom } from 'recoil'\r\n\r\nconst currentListState = atom({\r\n    key: 'currentListState',\r\n    default: [],\r\n})\r\n\r\nconst currentBreaktimeState = atom({\r\n    key: 'currentBreaktimeState',\r\n    default: 15\r\n})\r\n\r\nconst currentResultState = atom({\r\n    key: 'currentResultState',\r\n    default: {}\r\n})\r\n\r\nexport { currentListState, currentBreaktimeState, currentResultState }","import { makeStyles } from '@material-ui/core/styles';\r\nconst useStyle = makeStyles({\r\n    root: {\r\n        padding: '2em',\r\n        margin: '1em',\r\n    },\r\n    inputStyles: {\r\n        padding: '0.5em',\r\n        borderRadius: '3px',\r\n        border: '1px solid #d4d4d4',\r\n        width: '100%',\r\n        margin: '0.5em',\r\n    },\r\n    formStyles : {\r\n        width: '90%'\r\n    },\r\n    resultContainer: {\r\n        border: '1px solid #d4d4d4',\r\n        padding: '1em',\r\n        textAlign: 'center',\r\n        borderRadius: '3px',\r\n        marginBottom:'0.5em',\r\n    },\r\n    inlineDisplay: {\r\n        display:'inline',\r\n        paddingRight: '0.5em'\r\n    },\r\n    beingOnBreakContainer: {\r\n        height: '30vh',\r\n        padding: '0px',\r\n        overflowY: 'scroll',\r\n    },\r\n    breakOverTimeContainer: {\r\n        height: '10vh',\r\n        padding: '0px',\r\n        overflowY: 'scroll',\r\n    },\r\n    loadingOverlay: {\r\n        position: 'absolute',\r\n        backgroundColor: 'rgba(255,255,255,0.8)',\r\n        width: '100%',\r\n    },\r\n    scanInputBlock: {\r\n        position: 'relative',\r\n        marginTop:'0.5em'\r\n    },\r\n    iconPadding: {\r\n        padding: '0.5em'\r\n    },\r\n    whiteColor : {\r\n      color: 'white'\r\n    },\r\n    flexDisplay: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'center'\r\n    },\r\n    associateDisplay: {\r\n        paddingTop: '0.2em',\r\n        paddingBottom: '0.2em',\r\n        borderBottom: 'solid 1px #d4d4d4',\r\n        paddingRight: '0.2em'\r\n    },\r\n    listHeader: {\r\n        paddingTop: '10px',\r\n        marginRight: '20px'\r\n    },\r\n    boldFont: {\r\n        fontWeight: 'bold'\r\n    },\r\n    bigText: {\r\n        fontSize: '22px',\r\n    }\r\n})\r\n\r\nexport default useStyle;","const HOSTNAME = 'https://tranquil-meadow-63605.herokuapp.com/';\r\nexport {HOSTNAME};","import { selector } from 'recoil'\r\nimport { currentBreaktimeState, currentListState } from './atoms'\r\n\r\nconst associatesBeingOnBreakState = selector({\r\n    key: 'associatesBeingOnBreakState',\r\n    get: ({get}) => {\r\n        const list = get(currentListState);\r\n        return list.filter(item => !(item.time_in));\r\n    }\r\n})\r\n\r\nconst associatesBreakOverTimeState = selector({\r\n    key: 'associatesBreakOverTimeState',\r\n    get: ({get}) => {\r\n        const list = get(currentListState);\r\n        const currentBreakTime = get(currentBreaktimeState);\r\n\r\n        return list.filter(item => {\r\n            const timeOut = new Date(item.time_out);\r\n            const timeIn = new Date(item.time_in);\r\n            if (!item.time_in) return false;\r\n            return ((timeIn - timeOut) > (currentBreakTime*60*1000 + 5*60*1000))})\r\n        \r\n    }\r\n})\r\n\r\nconst numberOfAssociatesScannedOutState = selector({\r\n    key: 'numberOfAssociatesScannedOutState',\r\n    get: ({get}) => {\r\n        const list = get(currentListState);\r\n        return list.length;\r\n    }\r\n})\r\n\r\nconst numberOfAssociateBackFronBreakState = selector({\r\n    key: 'numberOfAssociateBackFronBreakState',\r\n    get: ({get}) => {\r\n        const list = get(currentListState);\r\n        return list.filter(item => item.time_in).length;\r\n    }\r\n})\r\n\r\n\r\nexport { associatesBeingOnBreakState, associatesBreakOverTimeState,\r\n    numberOfAssociatesScannedOutState, numberOfAssociateBackFronBreakState }","import { Grid, Paper, Typography, Box, CircularProgress } from '@material-ui/core'\r\nimport React, { createRef, useEffect, useState } from 'react'\r\nimport useStyle from './../Styles'\r\nimport {HOSTNAME} from './../Constants'\r\nimport { useSetRecoilState, useRecoilValue } from 'recoil'\r\nimport { currentResultState } from '../recoil/atoms'\r\nimport { numberOfAssociatesScannedOutState } from './../recoil/selectors'\r\n\r\n\r\nconst BadgeScan = (props) => {\r\n    const classes = useStyle();\r\n    const [badge_number, setBadgeNumber] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const inputRef = createRef();\r\n    const setCurrentResult = useSetRecoilState(currentResultState);\r\n    const numberOfAssociatesScannedOut = useRecoilValue(numberOfAssociatesScannedOutState);\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) \r\n            inputRef.current.focus();\r\n    });\r\n\r\n    const onBadgeScan = (e) => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'badge-scan/', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                badge_number\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS')\r\n                setCurrentResult(data);\r\n            else window.alert('BADGE SCAN FAILED. PLEASE TRY AGAIN');\r\n        }).catch(e => {\r\n            console.log(e);\r\n            window.alert('NETWORK ERROR! BADGE SCAN FAILED')\r\n        }).finally(()=> {\r\n            setLoading(false);\r\n            setBadgeNumber('');\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Paper className={classes.root}>\r\n            <Grid container direction='column'>\r\n                <Box>\r\n                    <Typography variant='h5'\r\n                        color='primary'\r\n                        className={classes.inlineDisplay}>\r\n                        Associate Scanned Out for Break \r\n                    </Typography>\r\n                    <Typography variant='h5'\r\n                        color='textSecondary'\r\n                        className={classes.inlineDisplay}>\r\n                            {numberOfAssociatesScannedOut}\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Box className={classes.scanInputBlock}>\r\n                    <Box hidden={!loading} className={classes.loadingOverlay}>\r\n                        <Grid container alignItems='center' justify='center'>\r\n                            <CircularProgress></CircularProgress>\r\n                        </Grid>\r\n                    </Box>\r\n                    <form className={classes.formStyles} \r\n                        onSubmit={onBadgeScan}>\r\n                        <input\r\n                            onChange={e => setBadgeNumber(e.target.value)}\r\n                            value={badge_number}\r\n                            className={classes.inputStyles}\r\n                            placeholder=\"Scan Associate's Badge\"\r\n                            ref={inputRef}>\r\n                        </input>\r\n                    </form>\r\n                </Box>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default BadgeScan;","import React from 'react'\r\nimport { Paper, Typography, Grid, Container } from '@material-ui/core'\r\nimport useStyle from '../Styles'\r\nimport { useRecoilValue } from 'recoil'\r\nimport {associatesBeingOnBreakState} from './../recoil/selectors'\r\n\r\n\r\nconst BeingOnBreak = (props) => {\r\n    const beingOnBreakList = useRecoilValue(associatesBeingOnBreakState);\r\n\r\n    const classes = useStyle();\r\n    return(\r\n        <Paper className={classes.root}>\r\n            <Grid container>\r\n                <Typography variant='h5'\r\n                    color='primary'>\r\n                    Associate Being On Break&nbsp;&nbsp;\r\n                </Typography>\r\n                <Typography variant='h5'\r\n                    color='textSecondary'>\r\n                        {beingOnBreakList.length}\r\n                </Typography>\r\n                <Grid container className={classes.listHeader}>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant='h6'>\r\n                            Badge\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant='h6'>\r\n                            Login\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={4}>\r\n                        <Typography variant='h6'>\r\n                            Name\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={2}>\r\n                        <Typography variant='h6'>\r\n                            Time\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Container className={classes.beingOnBreakContainer}>\r\n                {\r\n                    beingOnBreakList.map(item => {\r\n                        const timeOut = new Date(item.time_out);\r\n                        return (\r\n                            <Grid key={item.badge_number} container \r\n                                className={classes.associateDisplay}>\r\n                                <Grid item xs={6} sm={3}>\r\n                                    <Typography>\r\n                                        {item.badge_number}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={3}>\r\n                                    <Typography>\r\n                                        {item.user_name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={4}>\r\n                                    <Typography>\r\n                                        {item.user_first_name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={2}>\r\n                                    <Typography>\r\n                                        {timeOut.getHours()}:{timeOut.getMinutes()}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    )\r\n                }\r\n                </Container>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default BeingOnBreak;","export default __webpack_public_path__ + \"static/media/breaktime.e5f7e1ce.png\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport {currentBreaktimeState} from './../recoil/atoms'\r\nimport {useRecoilState} from 'recoil'\r\nimport useStyle from './../Styles'\r\n\r\nexport default function SetTime() {\r\n  const classes = useStyle();\r\n  const [currentBreaktime, setCurrentBreaktime] = useRecoilState(currentBreaktimeState);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNoSet = () => {\r\n      setAnchorEl(null);\r\n  }\r\n\r\n  const handleClose = (minutes) => {\r\n    setCurrentBreaktime(minutes);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button aria-controls=\"simple-menu\" \r\n        aria-haspopup=\"true\" \r\n        onClick={handleClick}\r\n        className={classes.bigText}>\r\n        {currentBreaktime} Minutes\r\n      </Button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleCloseNoSet}\r\n      >\r\n        <MenuItem onClick={() => handleClose(15)}>15 Minutes</MenuItem>\r\n        <MenuItem onClick={() => handleClose(30)}>30 Minutes</MenuItem>\r\n        <MenuItem onClick={() => handleClose(45)}>45 Minutes</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import { Paper, Container, Typography, Grid } from '@material-ui/core'\r\nimport React from 'react'\r\nimport useStyle from './../Styles'\r\nimport BreakImage from './../assets/breaktime.png'\r\nimport SetTime from './SetTime'\r\nimport { useRecoilValue } from 'recoil'\r\nimport { currentBreaktimeState, currentResultState } from '../recoil/atoms'\r\nimport { numberOfAssociateBackFronBreakState } from '../recoil/selectors'\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nconst ScanResults = (props) => {\r\n    const classes = useStyle();\r\n    const currentResult = useRecoilValue(currentResultState);\r\n    const breaktime = useRecoilValue(currentBreaktimeState);\r\n    const numberOfAssociatesBackFromBreak = useRecoilValue(numberOfAssociateBackFronBreakState);\r\n\r\n    const chooseStyle = () => {\r\n        if (currentResult.duration - breaktime*60*1000 <= 0)\r\n            return({\r\n                backgroundColor: '#91ff99',\r\n                color: '#04b811',\r\n                border: 'solid 1px #04b811'\r\n            });\r\n        else if (currentResult.duration - breaktime*60*1000 <= 5*60*1000)\r\n            return({\r\n                backgroundColor: '#fbff91',\r\n                color: '#e8f011',\r\n                border: 'solid 1px #e8f011'\r\n            });\r\n        else return({\r\n            backgroundColor: '#ff7a7a',\r\n            color: '#d60d0d',\r\n            border: 'solid 1px #d60d0d'\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const chooseDisplay = () => {\r\n        if (!currentResult.status || currentResult.status !== 'SUCCESS')\r\n            return (                \r\n                <Container className={classes.resultContainer}>\r\n                    <Typography color='textSecondary'>\r\n                        Awaiting Badge Scan\r\n                    </Typography>\r\n                </Container>)\r\n        else \r\n        {\r\n            const { associateData } = currentResult;\r\n            switch(currentResult.operation)\r\n            {\r\n                case 'BREAK_OUT':\r\n                    return(\r\n                        <Container className={classes.resultContainer}>\r\n                            <Typography color='textSecondary'>\r\n                                Associate <span className={classes.boldFont}>{associateData.badge_number} {associateData.user_name}</span> is going to break\r\n                            </Typography>\r\n                        </Container>\r\n                    )\r\n                case 'BREAK_IN':\r\n                    const durMinute = Math.floor(currentResult.duration/1000/60);\r\n                    const durSecond = Math.floor(currentResult.duration/1000%60);\r\n                    return(\r\n                        <Container\r\n                            style={chooseStyle()} \r\n                            className={classes.resultContainer}>\r\n                            <Typography color='textSecondary'>\r\n                                Associate <span className={classes.boldFont}>{associateData.badge_number} {associateData.user_name}</span> returned from break\r\n                            </Typography>\r\n                            <Typography color='textSecondary'\r\n                                className={classes.boldFont}>\r\n                                {durMinute} Minutes {durSecond} Seconds\r\n                            </Typography>\r\n                        </Container>\r\n                    )\r\n                default: \r\n                    return(\r\n                        <Container className={classes.resultContainer}>\r\n                            <Typography color='textSecondary'>\r\n                                Awaiting Badge Scan\r\n                            </Typography>\r\n                        </Container>\r\n                    )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div className={classes.flexDisplay}>\r\n                <Typography variant='h5' color='primary' className={classes.inlineDisplay}>\r\n                    Current Breaktime \r\n                </Typography>\r\n                <AccessTimeIcon/>\r\n                <SetTime/>\r\n            </div>\r\n            <Grid container \r\n                direction='column'\r\n                justify='center' \r\n                alignItems='center'>\r\n                <img src={BreakImage} alt='' width='80%' height='auto'></img>\r\n                \r\n                {chooseDisplay()}\r\n\r\n            </Grid>\r\n            <Typography color='textSecondary'>\r\n                Associates Returned From Break &nbsp;&nbsp; \r\n                {numberOfAssociatesBackFromBreak} \r\n            </Typography>\r\n        </Paper>\r\n\r\n    )\r\n}\r\n\r\nexport default ScanResults;","import React from 'react'\r\nimport { Paper, Typography, Grid, Container } from '@material-ui/core'\r\nimport useStyle from '../Styles'\r\nimport { useRecoilValue } from 'recoil'\r\nimport { associatesBreakOverTimeState} from './../recoil/selectors'\r\n\r\n\r\nconst BeingOnBreak = (props) => {\r\n    const beingOnBreakList = useRecoilValue(associatesBreakOverTimeState);\r\n\r\n    const classes = useStyle();\r\n    return(\r\n        <Paper className={classes.root}>\r\n            <Grid container>\r\n                <Typography variant='h5'\r\n                    color='primary'>\r\n                    Associate Taking Over Time Break&nbsp;&nbsp;\r\n                </Typography>\r\n                <Typography variant='h5'\r\n                    color='textSecondary'>\r\n                        {beingOnBreakList.length}\r\n                </Typography>\r\n                <Grid container className={classes.listHeader}>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant='h6'>\r\n                            Badge\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Typography variant='h6'>\r\n                            Login\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={4}>\r\n                        <Typography variant='h6'>\r\n                            Name\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={2}>\r\n                        <Typography variant='h6'>\r\n                            Duration\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Container className={classes.breakOverTimeContainer}>\r\n                {\r\n                    beingOnBreakList.map(item => {\r\n                        const timeOut = new Date(item.time_out);\r\n                        const timeIn = new Date(item.time_in);\r\n                        const duration = timeIn - timeOut;\r\n                        const durMinute = duration/1000/60;\r\n                        const durSeconds = duration/1000%60;\r\n                        return (\r\n                            <Grid key={item.badge_number} container \r\n                                className={classes.associateDisplay}>\r\n                                <Grid item xs={6} sm={3}>\r\n                                    <Typography>\r\n                                        {item.badge_number}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={3}>\r\n                                    <Typography>\r\n                                        {item.user_name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={4}>\r\n                                    <Typography>\r\n                                        {item.user_first_name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6} sm={2}>\r\n                                    <Typography>\r\n                                        {Math.floor(durMinute)}:{Math.floor(durSeconds)}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    )\r\n                }\r\n                </Container>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default BeingOnBreak;","import React , {useState} from 'react'\r\nimport { Grid, Typography, Button, Box, CircularProgress } from '@material-ui/core'\r\nimport FreeBreakfastIcon from '@material-ui/icons/FreeBreakfast';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport useStyle from './../Styles'\r\nimport { HOSTNAME } from '../Constants';\r\n  \r\nconst AppBarContent = (props) => {\r\n    const classes = useStyle();\r\n\r\n    const onClearList = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'clear-breakroom/', {method:'POST'})\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.status !== 'SUCCESS')\r\n                window.alert('FAILED TO CLEAR BREAKROOM. PLEASE TRY AGAIN LATER')\r\n        }).catch(e => {\r\n            console.log(e);\r\n            window.alert('NETWORK ERROR! CLEAR LIST FAILED');\r\n        }).finally(() => setLoading(false));\r\n    }\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    return(\r\n        <Grid container direction='row' \r\n            justify='space-between'\r\n            alignItems='center'>\r\n\r\n            <Box className={classes.flexDisplay}>\r\n            <FreeBreakfastIcon className={classes.iconPadding}/>\r\n            <Typography variant='h5'>\r\n                DLA9 Breaktime Management App\r\n            </Typography>\r\n            </Box>\r\n        \r\n            <div>\r\n                {loading ? <CircularProgress className={classes.whiteColor}/> :\r\n                <Button onClick={onClearList}\r\n                    variant='text'\r\n                    className={classes.whiteColor}\r\n                    endIcon={<DeleteForeverIcon/>}>\r\n                    Clear List\r\n                </Button>\r\n                }\r\n            </div>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default AppBarContent","\nimport './App.css';\nimport { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil' \nimport { io } from 'socket.io-client'\nimport { currentListState } from './recoil/atoms';\nimport BadgeScan from './components/BadgeScan';\nimport { Grid, AppBar, makeStyles } from '@material-ui/core'\nimport BeingOnBreak from './components/BeingOnBreak';\nimport ScanResults from './components/ScanResults';\nimport BreakOverTime from './components/BreakOverTime';\nimport AppBarContent from './components/AppBarContent';\n\nconst useStyle = makeStyles({\n  appBarStyle: {\n    padding: '1em'\n  }\n})\n\nfunction App() {\n  const classes = useStyle();\n  const setList = useSetRecoilState(currentListState);\n  \n  useEffect(() => {\n    const socket = io('https://tranquil-meadow-63605.herokuapp.com/');\n    socket.emit('breaktime_connect');\n    socket.on('new_list', data => {\n      setList(data)}\n      );\n  });\n\n  return (\n    <div className=\"App\">\n      <AppBar className={classes.appBarStyle}\n        position='static'>\n        <AppBarContent/>\n      </AppBar>\n      <Grid container>\n        <Grid item xs={12} md={5}>\n          <BadgeScan/>\n          <ScanResults/>\n        </Grid>\n        <Grid item xs={12} md={7}>\n          <BeingOnBreak/>\n          <BreakOverTime/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}